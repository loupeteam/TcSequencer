<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Sequencer_Test" Id="{5528d32b-0dad-48bc-b63b-5f76dadd2ea9}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Sequencer_Test EXTENDS FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[OnAbort();
OnEntry();
CurrentAndRequestStep();]]></ST>
    </Implementation>
    <Method Name="CurrentAndRequestStep" Id="{00c73c39-e570-45cb-8831-bed7304ddd26}">
      <Declaration><![CDATA[METHOD CurrentAndRequestStep
VAR
	sequencer : Sequencer(0);
	Command : PLCOpenCommand();
	step : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CurrentAndRequestStep');
	AssertEquals_UDINT(Expected := 0, Actual := sequencer.CurrentStep, Message := 'Current step shall default to 0');
	
	step := 2;
	sequencer.requestStep(step);
	AssertEquals_UDINT(Expected := step, Actual := sequencer.CurrentStep, Message := 'Current step expected to be updated');
	
	step := 3;
	sequencer.requestStepClear(step);
	AssertEquals_UDINT(Expected := step, Actual := sequencer.CurrentStep, Message := 'Current step expected to be updated');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAbort" Id="{756190d0-8aa4-4061-8aca-7e61a0ad15cd}">
      <Declaration><![CDATA[METHOD OnAbort
VAR
	sequencer : Sequencer(0);
	outputVal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('SequenceOnError');
	sequencer.requestStep(1);
	// setup abort
	sequencer.i_sequence.isAbort := 1;
	outputVal := sequencer.onError(1);
	AssertTrue(Condition := outputVal, Message := 'This is not a real test');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnEntry" Id="{3a0279ba-27ed-47d6-a39c-8c9f7c30b3c2}">
      <Declaration><![CDATA[METHOD OnEntry
VAR_INPUT
END_VAR

VAR
	sequencer : Sequencer(0);
	outputVal: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('OnEntry');
	
	sequencer.startSequence();
	sequencer.doStep();
	AssertTrue(Condition := sequencer.onEntry(), Message := 'onEntry should evaluate TRUE on first pass through a new step');
	sequencer.doStep();
	AssertFalse(Condition := sequencer.onEntry(), Message := 'onEntry should evaluate FALSE on second pass');
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnError" Id="{ceefdcc0-adb1-4ad8-928a-8e1e77a9bfee}">
      <Declaration><![CDATA[METHOD OnError
VAR
	sequencer : Sequencer(0);
	outputVal : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('SequenceOnError');
	sequencer.sequenceError(0, 'Test Error');
	sequencer.Run();
	outputVal := sequencer.onError(1);
	
	AssertTrue(Condition := outputVal, Message := 'This is not a real test');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnSuccess" Id="{6a55c547-d864-42a2-86db-036e6aa1ad13}">
      <Declaration><![CDATA[METHOD OnSuccess
VAR_INPUT
	sequencer : Sequencer(0);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('OnSuccess');

	//sequencer.i_sequence.activeTasks
	// next step negative
	//sequencer.setNextStep(-1);
	//sequencer.onSuccess(-1);
	
	// next step >= 0


TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Start" Id="{3d524a28-168c-402c-a8b1-706368e2797f}">
      <Declaration><![CDATA[METHOD Start
VAR
	sequencer : Sequencer(0);
	output : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Start');
	// activeTasks.Start) = 0
	// TODO
	
	//output := sequencer.i_sequence.startStep
	
	

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>